<?php
/**
* @file
* Block Module for displaying a Kmaps Navigator
*/

function kmaps_facets_init() {
	global $base_url, $base_path;
	libraries_load('json2');
	$res = libraries_load('fancytree','source');
    libraries_load('ajaxsolr');
    drupal_add_library('system', 'drupal.ajax'); //Add Ajax library
	
	$modhome = drupal_get_path('module', 'kmaps_facets');
	drupal_add_css($modhome . "/css/kmaps_facets.css");
    drupal_add_js($modhome . "/js/kmaps_facets.js",array( 'group' => JS_THEME, ));
	
	drupal_add_js(array(
			'kmaps_facets' => array(
				'mod_home' => $base_url . $base_path . $modhome,
			),
		),
	'setting');
}

function kmaps_facets_help($path, $arg) {
    switch ($path) {
        case "admin/help#kmaps_facets":
            return '<p>' . t("Kmaps Search and Navigation:  So Helpful!") . '</p>';
            break;
    }
}

function kmaps_facets_menu() {

  $items = array(); 
	
	// Path for Module Settings form
  $items['admin/config/user-interface/kmaps_facets'] = array(
    'title' => 'Kmaps Facets Settings',
    'description' => 'Configure Kmaps Facets Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kmaps_facets_settings'),
    'access arguments' => array('administer site configuration'),
   );
   
   // Path for the kmap tree by block
   $items['kmaps/facettree/block/%'] = array(
    'title' => '',
    'description' => 'Return data for a block tree',
    'page callback' => 'kmaps_facets_block_tree',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
   );
   
	 // Path for Module Settings form
   $items['kmaps/facets/%/%'] = array(
    'title' => '',
    'description' => 'Kmap Facet Search',
    'page callback' => 'kmaps_facets_gallery',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
   );
  return $items;
}

/**
 * Module Admin form to set number of kmap navigator (facet) blocks for site
 * Get variable by $km_block_ct = variable_get("kmaps_facets_block_count", 2);
 */
function kmaps_facets_settings(array $form, array &$form_state) {
  $form = array();

  $form['kmaps_facets_block_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Kmap Facet Blocks'),
    '#default_value' => variable_get('kmaps_facets_block_count', 2),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The number of Kmap facet blocks to have on this site"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Validate module settings, block number must be an integer and >= 1
 */
function kmaps_facets_settings_validate($form, &$form_state) {
	$blockct = $form_state['values']['kmaps_facets_block_count'];
  if (!is_numeric($blockct)) {
    form_set_error('kmaps_facets_block_count', t('You must enter an integer for the number of Kmap facet blocks.'));
  }
  elseif ($blockct <= 0) {
    form_set_error('kmaps_facets_block_count', t('Maximum number of blocks must be at least 1.'));
  }
}

/**
 * Implements hook_block_info().
 */
function kmaps_facets_block_info() {
	$blocks = array();
  for ($i = 1; $i <= variable_get("kmaps_facets_block_count", 2); $i++) {
    $blocks[$i]['info'] = variable_get('kmaps_facets_block_name_' . $i, 'Kmaps Facets ' . $i) . ' (Kmaps Facets)';
    // We have too many things changing per user, per page to cache.
    $blocks[$i]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 *  Implements hook_block_configure($delta)
 *  Creates configure form for each kmap nav block
 */

function kmaps_facets_block_configure($delta = 1) {
	$form['kmaps_facets_block_delta'] = array(
		'#type' => 'hidden',
		'#value' => $delta,
	);
   $form['kmaps_facets_block_name_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Block name'),
    '#default_value' => variable_get('kmaps_facets_block_name_' . $delta, 'Kmaps Facet Block ' . $delta),
  );
  $form['kmaps_facets_block_type_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Kmap Tree Type'),
    '#description' => t('Type of Kmap Navigator Tree to Show in Block'),
    '#default_value' => variable_get('kmaps_facets_block_type_' . $delta, 'places'),
    '#options' => drupal_map_assoc(array('places', 'subjects')),
  );
  $form['kmaps_facets_block_root_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Kmap Root Node'),
    '#description' => t('Enter the KMap ID for the Root Node of the nav-tree in this block'),
    '#default_value' => variable_get('kmaps_facets_block_root_' . $delta, FALSE),
  );
	
  $form['kmaps_facets_block_field_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Kmaps Facet Field'),
    '#description' => t('Choose which Drupal Kmaps field to display counts for'),
    '#options' => kmaps_facets_get_kmap_field_list(),
    '#default_value' => variable_get('kmaps_facets_block_field_' . $delta, FALSE),
  );
	
  return $form;
}

function kmaps_facets_get_kmap_field_list() {
	$finfo = field_info_field_map();
	$kmfields = array();
	foreach($finfo as $fnm => $fstats) {
	  if($fstats['type'] == 'shanti_kmaps_fields_default') {
			$types = array();
			foreach ($fstats['bundles']['node'] as $ctype) {
				$types[] = $ctype;
			}
			$kmfields[$fnm] = "$fnm (" . implode(', ', $types) . ")";
	  }
	}
	return $kmfields;
}


/**
 * Block admin form alter to add validation for kmap facet block settings form
 */
function kmaps_facets_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if ($form['module']['#value'] == 'kmaps_facets') {
    $form['#validate'][] = 'kmaps_facets_block_validate';
  }
}

/**
 * Function to validate kmap facet block settings to make sure kmaps root id either FALSE or a positive integer
 */
function kmaps_facets_block_validate(&$form, $form_state) {
	// TODO: Add check with kmaps server to make sure root id is a valid kmap id for that type.
	if (isset($form_state['values']['kmaps_facets_block_delta'])) {
		$delta = $form_state['values']['kmaps_facets_block_delta'];
		$root = $form_state['values']["kmaps_facets_block_root_{$delta}"];
		if ($root && $root != "") {
			if (is_numeric($root)) {
				$root = $root * 1;
				if ($root < 1) {
					form_set_error("kmaps_facets_block_root_{$delta}", t('The root KMap Id must be a positive integer'));
				}
			} else {
					form_set_error("kmaps_facets_block_root_{$delta}", t('The root KMap Id must be an integer'));
			}
		}
	} 
}


/**
 * Implements hook_block_save().
 */
function kmaps_facets_block_save($delta, $edit) {
    variable_set('kmaps_facets_block_name_' . $delta, $edit['kmaps_facets_block_name_' . $delta]);
    variable_set('kmaps_facets_block_type_' . $delta, $edit['kmaps_facets_block_type_' . $delta]);
    if ($edit['kmaps_facets_block_root_' . $delta] == "") { $edit['kmaps_facets_block_root_' . $delta] = FALSE; }
    variable_set('kmaps_facets_block_root_' . $delta, $edit['kmaps_facets_block_root_' . $delta]);
    variable_set('kmaps_facets_block_field_' . $delta, $edit['kmaps_facets_block_field_' . $delta]);
}


/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function kmaps_facets_block_view($delta = 1) {
  // Set the block type in Drupal settings
	$km_type = variable_get('kmaps_facets_block_type_' . $delta, 'places');
    $km_data = json_encode(kmaps_facets_facet_info($delta, TRUE));
	$block = array();
	drupal_add_js(array('kmaps_facets' => array("block_" . $delta . "_type" => $km_type, 
																						  "block_" . $delta . "_data" => $km_data)), 'setting');
	$block = _kmaps_facets_block($delta);
	
	return $block;
}

/**
 * Helper function to call theme
 */
function _kmaps_facets_block($delta) {
    // error_log("_kmaps_facets_block helper function...");
    // Send delta and block type to template to store in data- attributes. Duplicates Drupal.settings in block_view which we may not need
    $kmtype = variable_get('kmaps_facets_block_type_' . $delta, 'places');
		$kmroot = variable_get('kmaps_facets_block_root_' . $delta, FALSE);
		$block = array(
        'subject' => '',
        'content' => theme('kmaps_facets_block', array(
            'delta' => $delta, 'kmtype' => $kmtype, 'kmroot' => $kmroot, 'treeurl' => url('kmaps/facettree/block/' . $delta, array('absolute' => TRUE))
        )),
    );
//    error_log("returning: " . print_r($block,true));
    return $block;
}

/**
 * Implements hook_theme()
 *
 */
function kmaps_facets_theme() {
    $module_path = drupal_get_path('module', 'kmaps_facets');
    $base = array(
        'path' => "{$module_path}/templates",
    );
    $ret = array(
        'kmaps_facets_block' => $base + array(
                // I could define here anything I want
                // It would be called from inside the subpath theme in the module path
                // as file abc.tpl.php
                'template' => 'kmaps_facets_block',
                // To override I need file
                // 'block--<MODULE_NAME>--<DELTA>.tpl.php'
                // somewhere in my theme's folder
                // (with '-' for '_' in <MODULE_NAME> and <DELTA>)
                // <DELTA> comes from array keys in hook_block_info
                // in this case
                // block--my-module--my-module-block1.tpl.php

                'variables' => array(
                    'delta' => NULL, 'kmtype' => NULL, 
                ),
                '#attached' => array(
                    'libraries_load' => array(
                        array(
                            'fancytree'
                        ),
                        array(
                            'ajaxsolr'
                        )
                    ),
                    'library' => array(
                        'system', 'drupal.ajax'
                    ),
                )
            )
    );

    // error_log("kmaps_facets_theme returning: " . print_r($ret,true));

    return $ret;

}

/**
 * Returns data for the tree in each block
 *      Checks cache for json definition of kmaps tree for each block ($delta). If not found, then calls subjectproxy.php to query the kmaps site
 *      designated by Shanti Kmaps Admin and get JSON def for subject tree, which is then save to cache. In either case, JSON for the tree is output
 *      to the browser.
 */
 function kmaps_facets_block_tree($delta) {
     global $base_url;
     $cache_name = "kmaps_facet_tree_block_{$delta}";
     if ($cache = cache_get($cache_name)) {
         drupal_json_output(json_decode($cache->data));
     } else {
         $km_type = variable_get('kmaps_facets_block_type_' . $delta, 'places');
         $km_root = variable_get('kmaps_facets_block_root_' . $delta, FALSE);
         $admin_vars = shanti_kmaps_admin_get_vars();
         $server = $admin_vars['shanti_kmaps_admin_server_' . $km_type];
         if ($km_root != '') { $km_root .= '/'; }
         $dataurl = $server . "/features/" . $km_root . "fancy_nested.json";
         if ($km_type == 'subjects' && $km_root == '') {
             $dataurl = $base_url . '/' . drupal_get_path('module', 'kmaps_facets') .  '/subjectproxy.php?server=' . $server;
         }
         $json_data = file_get_contents($dataurl);
         cache_set($cache_name, $json_data, 'cache');
         drupal_json_output(json_decode($json_data));
     }
 }

/**
 * New Search Flyout Preprocess used with Shanti_Kmap_facets 
 * When used with a Shanti Sarvaka based theme in the search flyout region, 
 * this sets up the proper code for use with the fancy tree JS library.
 */
function kmaps_facets_preprocess_region(&$vars) {
	if($vars['region'] == 'search_flyout') {
		// For search flyout in mediabase, sniff out facet api blocks so that they can be placed in tabs
		$elements = $vars['elements'];
		$children = element_children($elements);
		$facets_done = FALSE;
		$facetmu = '<div class="tab-content">';
		$facettabs = '<section class="view-section"><ul class="nav nav-tabs">'; 
		$fct = 0;
		foreach($children as $ename) {
			if(strpos($ename, 'kmaps_facets') > -1) {
				$el = $elements[$ename];
				$flabel = $el['#block']->title;
				$fct++;
				$srflabel = str_replace('_', '-', $ename);
				$active = ($fct == 1) ? " active":"";
				$bcnt = $el['#markup'];
				$facetmu .= "<div class=\"km-facet-div {$srflabel} treeview tab-pane{$active}\">{$bcnt}</div>";
				$facettabs .= "<li class=\"km-facet-tab {$srflabel}{$active}\"><a href=\".{$srflabel}\" data-toggle=\"tab\">" . 
												"{$flabel}</a></li>";
			} 
		}
		$facetmu .= '</div>';
		$facettabs .= '</ul>';
		$facetmu = $facettabs . $facetmu . '</section>';  
		$vars['facetcnt'] = $facetmu;
	}
}

/**
 * Creates an array of all kmap data for given block by delta on kmap id with each id having an array of nodes tagged with it
 */
function kmaps_facets_facet_info($delta, $tally_ancestors = TRUE) {
	$field_name =  variable_get('kmaps_facets_block_field_' . $delta, FALSE);
	$kmapres = array();
	if ($field_name) { 
		$tbl = 'field_data_' . $field_name;
		$col = $field_name . '_id';
		$raw = $field_name . '_raw';
		
		$q = db_select($tbl, 't')->fields('t'); //, array('entity_id', $col)
		$filters = _kmaps_facets_get_filter_info();
		$active_facet = 0;
		if (isset($filters[$delta]) && is_array($filters[$delta])) {
			foreach($filters[$delta] as $kid) {
				$q->condition($field_name . '_raw', "%<{$kid}>%", "LIKE");
				$active_facet = $kid;
			}
		}
		drupal_add_js(array('kmaps_facets' => array('facet_info' => array("block-$delta" => $active_facet))), 'setting');
		$res = $q->execute();
		$alltags = $res->fetchAll();
		
		foreach ($alltags as $tinfo) {
			if ($tally_ancestors) {
				$anc = shanti_kmaps_fields_parse_raw($tinfo->{$raw});
				$nid = $tinfo->entity_id;
				foreach ($anc as $kid) { 
					$kmapres[$kid][] = $nid;
				}
			} else {
				$nid = $tinfo->entity_id;
				$kid = $tinfo->{$col};
				$kmapres[$kid][] = $nid;
			}
		}
		foreach ($kmapres as $key => $karray) {
			$univals = array_unique($karray);
			$kmapres[$key] = array_values($univals);
		}
	} else {
		watchdog('kmaps_facets', "Kmaps Facet Block $delta does not have a field associated with it. Cannot show tree!");
	}
	return $kmapres;
}

/**
 * Get filter info from the url
 */
function _kmaps_facets_get_filter_info() {
	$mypath = current_path();
	$fctstr = str_replace('kmaps/facets/', '', $mypath);
	$fctpts = explode('/', $fctstr);
	$facets = array();
	for($n = 0; $n < count($fctpts) - 1; $n += 2) {
		$bn = $fctpts[$n];
		$kid = $fctpts[$n+1];
		if (isset($facets[$bn])) {
			$facets[$bn][] = $kid;
		} else {
			$facets[$bn] = array($kid);
		}
	}
	return $facets;
} 
 
/**
 * Display a page of facet results
 * @param $delta int
 * 	The delta number of the block from which the facet came
 * 
 * @param $kid int
 * 	The kmap id for the facet being displayed.
 */
function kmaps_facets_gallery($delta, $kid) {
	// Get Block & Kmap Info
	module_load_include('inc', 'shanti_kmaps_fields', 'shanti_kmaps_fields.kmaps_api');
	$block = block_load('kmaps_facets', $delta);
	$km_domain = variable_get('kmaps_facets_block_type_' . $delta, FALSE);
	$km_field =  variable_get('kmaps_facets_block_field_' . $delta, FALSE);
	$km_title = shanti_kmaps_fields_get_title_by_id($km_domain, $kid);
	
	if ($km_field) {
		// Do the database query on that field for unique nodes
		$tbl = 'field_data_' . $km_field;
		$field = $km_field . "_raw";
		$kpath = $km_field . "_path";
		$kidst = "%<{$kid}>%";
		$query = db_select($tbl, 't')
			->fields('t', array('entity_id'))->condition($field, $kidst, 'LIKE')
			->distinct();
		$allrows = $query->execute();
		$count = $allrows->rowCount();
		$query = db_select($tbl, 't')->extend('PagerDefault')->element(0)
			->fields('t', array('entity_id'))->condition($field, $kidst, 'LIKE')->distinct()->limit(30);
		$rows = $query->execute();
		// Create the page build
		$facets = array(); // START
		drupal_set_title($block->title . ": " . $km_title);
		$build['initdesc'] = array('#markup' => t('<p>@count items are tagged with @kmaptype, "@kmaptitle":</p>',
				array('@count' => $count, '@kmaptype' => $block->title, '@kmaptitle' => $km_title)));
		$gallery = '<ul class="shanti-gallery">';
		foreach($rows as $row) {
			//if (!$ancestors && isset($row->{$kpath})) { $ancestors = $row->{$kpath}; }
			$nid = $row->entity_id;
			$node = node_load($nid);
			$gallery .= render(node_view($node,'teaser'));
		}
		$gallery .= '</ul>';
		$build['gallery'] = array('#markup' => $gallery);
		
		// Add pager to build using the sites core override preset pager
		$build['pagerer_mini_0'] = array(
	    '#theme' => 'pagerer',
	    '#preset' => _pagerer_get_variable('core_override_preset'),
	    '#element' => 0,
	  );
		return $build;
	} else {
		// If no field associated with designated block, send warning and page not found
		drupal_set_message("Sorry, something went wrong with the Kmaps Facet search. Please check the URL.", "warning");
		drupal_not_found();
	}
}

function kmaps_facets_process_facets(&$facets, $node, $km_field) {
	$fi = field_get_items('node', $node, $km_field);
	$nid = $node->nid;
	foreach ($fi as $n => $item) {
		$ancestors = shanti_kmaps_fields_parse_raw($item['raw']);
		foreach ($ancestors as $n => $kid) {
			if (is_array($facets[$kid])) {
				$facets[$kid][] = $nid;
			} else {
				$facets[$kid] = array($nid);
			}
		}
	}
	foreach ($facets as $kid => $karray) {
		$facets[$kid] = array_unique($karray);
	}
}
