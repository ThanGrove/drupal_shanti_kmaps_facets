<?php
/**
* @file
* Block Module for displaying a Kmaps Navigator
*/

function kmaps_facets_init() {
	global $base_url, $base_path;
	// error_log("loading json2: " . print_r(libraries_load('json2'),true));
	libraries_load('json2');
  // Need to add debugging (the returned object from libraries_load is the only error logging you ever get)
  //error_log("loading fancytree: " . print_r(libraries_load('fancytree','source'),true));
	$res = libraries_load('fancytree','source');
  //error_log("loading ajaxsolr: " . print_r(libraries_load('ajaxsolr'), true));
  libraries_load('ajaxsolr');
  drupal_add_js(drupal_get_path('module', 'kmaps_facets') . "/js/kmaps_facets.js",array(
      'group' => JS_THEME,
  ));
  // drupal_add_js("https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js",array('type' => 'external'));
  // drupal_add_css("https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css",array('type' => 'external'));
  // drupal_add_css("https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css",array('type' => 'external'));

  //Add Ajax library
  drupal_add_library('system', 'drupal.ajax');
	
	// Determine if URL one of block URLS
	// Iterate through each block checking blocks api url against current url
	// If match, set filter for that block
	$mypath = current_path();
	drupal_add_js(array(
			'kmaps_facets' => array(
				'mod_home' => $base_url . $base_path . drupal_get_path('module', 'kmaps_facets'),
			),
		),
	'setting');
	foreach (kmaps_facets_block_info() as $n => $bi) {
		$url = variable_get('kmaps_facets_block_api_url_' . $n, FALSE);
		if ($url) {
			$url = preg_replace('/^\//', '', $url);
			$url = str_replace('__KMID__', '(\d+)', $url);
			$patt = '/' . str_replace('/', '\/', $url) . '/';
			if (preg_match($patt, $mypath, $matches)) {
				drupal_add_js(array(
					'kmaps_facets' => array(
						'filter_block' => $n, 
						'filter_kid' => $matches[1],
					 )
				), 'setting');
				break;
			}
		}
	}
}

function kmaps_facets_help($path, $arg) {
    switch ($path) {
        case "admin/help#kmaps_facets":
            return '<p>' . t("Kmaps Search and Navigation:  So Helpful!") . '</p>';
            break;
    }
}

function kmaps_facets_menu() {

  $items = array(); 
	
	// Path for Module Settings form
  $items['admin/config/user-interface/kmaps_facets'] = array(
    'title' => 'Kmaps Facets Settings',
    'description' => 'Configure Kmaps Facets Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kmaps_facets_settings'),
    'access arguments' => array('administer site configuration'),
   );
	 // Path for Module Settings form
   $items['kmap/facets/%/%'] = array(
    'title' => 'Kmaps Facets Settings',
    'description' => 'Configure Kmaps Facets Module',
    'page callback' => 'kmap_facets_gallery',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
   );
  return $items;
}

/**
 * Module Admin form to set number of kmap navigator (facet) blocks for site
 * Get variable by $km_block_ct = variable_get("kmaps_facets_block_count", 2);
 */
function kmaps_facets_settings(array $form, array &$form_state) {
  $form = array();

  $form['kmaps_facets_block_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Kmap Facet Blocks'),
    '#default_value' => variable_get('kmaps_facets_block_count', 2),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The number of Kmap facet blocks to have on this site"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Validate module settings, block number must be an integer and >= 1
 */
function kmaps_facets_settings_validate($form, &$form_state) {
	$blockct = $form_state['values']['kmaps_facets_block_count'];
  if (!is_numeric($blockct)) {
    form_set_error('kmaps_facets_block_count', t('You must enter an integer for the number of Kmap facet blocks.'));
  }
  elseif ($blockct <= 0) {
    form_set_error('kmaps_facets_block_count', t('Maximum number of blocks must be at least 1.'));
  }
}

/**
 * Implements hook_block_info().
 */
function kmaps_facets_block_info() {
	$blocks = array();
  for ($i = 1; $i <= variable_get("kmaps_facets_block_count", 2); $i++) {
    $blocks[$i]['info'] = variable_get('kmaps_facets_block_name_' . $i, 'Kmaps Facets ' . $i) . ' (Kmaps Facets)';
    // We have too many things changing per user, per page to cache.
    $blocks[$i]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 *  Implements hook_block_configure($delta)
 *  Creates configure form for each kmap nav block
 */

function kmaps_facets_block_configure($delta = 1) {
	$form['kmaps_facets_block_delta'] = array(
		'#type' => 'hidden',
		'#value' => $delta,
	);
   $form['kmaps_facets_block_name_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Block name'),
    '#default_value' => variable_get('kmaps_facets_block_name_' . $delta, 'Kmaps Facet Block ' . $delta),
  );
  $form['kmaps_facets_block_type_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Kmap Tree Type'),
    '#description' => t('Type of Kmap Navigator Tree to Show in Block'),
    '#default_value' => variable_get('kmaps_facets_block_type_' . $delta, 'places'),
    '#options' => drupal_map_assoc(array('places', 'subjects')),
  );
  $form['kmaps_facets_block_root_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Kmap Root Node'),
    '#description' => t('Enter the KMap ID for the Root Node of the nav-tree in this block'),
    '#default_value' => variable_get('kmaps_facets_block_root_' . $delta, FALSE),
  );
	
  $form['kmaps_facets_block_field_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Drupal Facet Field'),
    '#description' => t('Choose which Drupal Kmaps field to display counts for'),
    '#options' => kmaps_facets_get_kmap_field_list(),
    '#default_value' => variable_get('kmaps_facets_block_field_' . $delta, FALSE),
  );
	
	
  $form['kmaps_facets_block_api_url_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('API Url for Links From Tree'),
    '#description' => t('Enter the pattern for URLs to show list of items tagged by kmap id, using __KMID__ to indicate where the Kmap Id goes.'),
    '#default_value' => variable_get('kmaps_facets_block_api_url_' . $delta, ''),
  );
	
  return $form;
}

function kmaps_facets_get_kmap_field_list() {
	$finfo = field_info_field_map();
	$kmfields = array();
	foreach($finfo as $fnm => $fstats) {
	  if($fstats['type'] == 'shanti_kmaps_fields_default') {
			$types = array();
			foreach ($fstats['bundles']['node'] as $ctype) {
				$types[] = $ctype;
			}
			$kmfields[$fnm] = "$fnm (" . implode(', ', $types) . ")";
	  }
	}
	return $kmfields;
}


/**
 * Block admin form alter to add validation for kmap facet block settings form
 */
function kmaps_facets_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if ($form['module']['#value'] == 'kmaps_facets') {
    $form['#validate'][] = 'kmaps_facets_block_validate';
  }
}

/**
 * Function to validate kmap facet block settings to make sure kmaps root id either FALSE or a positive integer
 */
function kmaps_facets_block_validate(&$form, $form_state) {
	// TODO: Add check with kmaps server to make sure root id is a valid kmap id for that type.
	if (isset($form_state['values']['kmaps_facets_block_delta'])) {
		$delta = $form_state['values']['kmaps_facets_block_delta'];
		$root = $form_state['values']["kmaps_facets_block_root_{$delta}"];
		if ($root && $root != "") {
			if (is_numeric($root)) {
				$root = $root * 1;
				if ($root < 1) {
					form_set_error("kmaps_facets_block_root_{$delta}", t('The root KMap Id must be a positive integer'));
				}
			} else {
					form_set_error("kmaps_facets_block_root_{$delta}", t('The root KMap Id must be an integer'));
			}
		}
	} 
}


/**
 * Implements hook_block_save().
 */
function kmaps_facets_block_save($delta, $edit) {
  variable_set('kmaps_facets_block_name_' . $delta, $edit['kmaps_facets_block_name_' . $delta]);
  variable_set('kmaps_facets_block_type_' . $delta, $edit['kmaps_facets_block_type_' . $delta]);
	if ($edit['kmaps_facets_block_root_' . $delta] == "") { $edit['kmaps_facets_block_root_' . $delta] = FALSE; }
  variable_set('kmaps_facets_block_root_' . $delta, $edit['kmaps_facets_block_root_' . $delta]);
	variable_set('kmaps_facets_block_field_' . $delta, $edit['kmaps_facets_block_field_' . $delta]);
	variable_set('kmaps_facets_block_api_url_' . $delta, $edit['kmaps_facets_block_api_url_' . $delta]);
}


/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function kmaps_facets_block_view($delta = 1) {
	  // Set the block type in Drupal settings
		$km_type = variable_get('kmaps_facets_block_type_' . $delta, 'places');
		$km_field =  variable_get('kmaps_facets_block_field_' . $delta, FALSE);
		$km_url =  variable_get('kmaps_facets_block_api_url_' . $delta, FALSE);
		//dpm($km_field, 'blocks km field value');
		$km_data = json_encode(kmaps_facets_facet_info($km_field, TRUE));
		drupal_add_js(array('kmaps_facets' => array("block_" . $delta . "_type" => $km_type, 
																							  "block_" . $delta . "_kmurl" => $km_url, 
																							  "block_" . $delta . "_data" => $km_data)), 'setting');
		$block = _kmaps_facets_block($delta);
		return $block;
}

/**
 * Helper function to call theme
 */
function _kmaps_facets_block($delta) {
    // error_log("_kmaps_facets_block helper function...");
    // Send delta and block type to template to store in data- attributes. Duplicates Drupal.settings in block_view which we may not need
    $kmtype = variable_get('kmaps_facets_block_type_' . $delta, 'places');
		$kmroot = variable_get('kmaps_facets_block_root_' . $delta, FALSE);
		$block = array(
        'subject' => '',
        'content' => theme('kmaps_facets_block', array(
            'delta' => $delta, 'kmtype' => $kmtype, 'kmroot' => $kmroot
        )),
    );
//    error_log("returning: " . print_r($block,true));
    return $block;
}

/**
 * Implements hook_theme()
 *
 */
function kmaps_facets_theme() {
    $module_path = drupal_get_path('module', 'kmaps_facets');
    $base = array(
        'path' => "{$module_path}/templates",
    );
    $ret = array(
        'kmaps_facets_block' => $base + array(
                // I could define here anything I want
                // It would be called from inside the subpath theme in the module path
                // as file abc.tpl.php
                'template' => 'kmaps_facets_block',
                // To override I need file
                // 'block--<MODULE_NAME>--<DELTA>.tpl.php'
                // somewhere in my theme's folder
                // (with '-' for '_' in <MODULE_NAME> and <DELTA>)
                // <DELTA> comes from array keys in hook_block_info
                // in this case
                // block--my-module--my-module-block1.tpl.php

                'variables' => array(
                    'delta' => NULL, 'kmtype' => NULL, 
                ),
                '#attached' => array(
                    'libraries_load' => array(
                        array(
                            'fancytree'
                        ),
                        array(
                            'ajaxsolr'
                        )
                    ),
                    'library' => array(
                        'system', 'drupal.ajax'
                    ),
                )
            )
    );

    // error_log("kmaps_facets_theme returning: " . print_r($ret,true));

    return $ret;

}

/**
 * Creates an array of all kmap data for given field keyed on kmap id with each id having an array of nodes tagged with it
 */
function kmaps_facets_facet_info($field_name, $tally_ancestors = FALSE) {
	//$fname = 'field_subject';
	$tbl = 'field_data_' . $field_name;
	$col = $field_name . '_id';
	
	$q = db_select($tbl, 't')->fields('t'); //, array('entity_id', $col)
	$res = $q->execute();
	$alltags = $res->fetchAll();
	$kmapres = array();
	foreach ($alltags as $tinfo) {
		if ($tally_ancestors) {
			$anc = shanti_kmaps_fields_get_ancestors($tinfo);
			$nid = $tinfo->entity_id;
			foreach ($anc as $kid) { 
				if (!isset($kmapres[$kid])) {
					$kmapres[$kid] = array($nid);
				} else if (!in_array($nid, $kmapres[$kid])) {
					$kmapres[$kid][] = $nid;
				}
			}
		} else {
			$nid = $tinfo->entity_id;
			$kid = $tinfo->{$col};
			if (!isset($kmapres[$kid])) {
				$kmapres[$kid] = array($nid);
			} else if (!in_array($nid, $kmapres[$kid])) {
				$kmapres[$kid][] = $nid;
			}
		}
	}
	return $kmapres;
}

/**
 * Display a page of facet results
 * @param type string
 * 	The type of facet, either subjects or places
 * 
 * @param kid int
 * 	The kmap id for the facet being displayed.
 */
function kmap_facets_gallery($type, $kid) {
	return "<div><ul><li><b>Type: </b> $type</li><li><b>Kid: </b> $kid</li></div>";
}
